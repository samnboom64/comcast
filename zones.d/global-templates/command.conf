/******************************************************************************
 * Icinga 2                                                                   *
 * Copyright (C) 2012-2015 Icinga Development Team (http://www.icinga.org)    *
 *                                                                            *
 * This program is free software; you can redistribute it and/or              *
 * modify it under the terms of the GNU General Public License                *
 * as published by the Free Software Foundation; either version 2             *
 * of the License, or (at your option) any later version.                     *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with this program; if not, write to the Free Software Foundation     *
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.             *
 ******************************************************************************/



object CheckCommand "check_net_snmp_cpu" {
        import "plugin-check-command"
        command = [ "/data/nagios/etc/plugins/checks/net-snmp/check_net_snmp_cpu.pl" ]
        arguments = {
                "--hostname" = "$address$"
                "-p" = 161
                "--snmp-version" = "2c"
                "--rocommunity" = "Q845q8st"
                "--timeout" = "25"
                "-w" = "wait,gt,50"
                "-c" = "wait,gt,70"
                "--sleep-time" = "5"
        }
}

object CheckCommand "check_net_snmp_procs" {
        import "plugin-check-command"
        command = [ "/data/nagios/etc/plugins/checks/net-snmp/check_net_snmp_procs.pl" ]
        arguments = {
                "--hostname" = "$address$"
                "-p" = 161
                "--snmp-version" = "2c"
                "--rocommunity" = "Q845q8st"
                "--timeout" = "25"
                "--snmp-max-msg-size" = "1500"
        }
}

object CheckCommand "check_net_snmp_disk" {
        import "plugin-check-command"
        command = [ "/data/nagios/etc/plugins/checks/net-snmp/check_net_snmp_disk.pl" ]
        arguments = {
                "--hostname" = "$address$"
                "-p" = 161
                "--snmp-version" = "2c"
                "--rocommunity" = "Q845q8st"
                "--timeout" = "25"
                "--snmp-max-msg-size" = "1500"
                "-w" = "85"
                "-c" = "90"
                "-P" = "all"
        }
}



object CheckCommand "nrpe8k" {
        import "plugin-check-command"

        command = [ "/usr/lib64/nagios/plugins/check_nrpe8k" ]

        arguments = {
                "-H" = "$nrpe_address$"
                "-p" = "$nrpe_port$"
                "-c" = "$nrpe_command$"
                "-n" = {
                        set_if = "$nrpe_no_ssl$"
                        description = "Do not use SSL."
                }
                "-u" = {
                        set_if = "$nrpe_timeout_unknown$"
                        description = "Make socket timeouts return an UNKNOWN state instead of CRITICAL"
                }
                "-t" = "$nrpe_timeout$"
                "-a" = {
                        value = "$nrpe_arguments$"
                        repeat_key = false
                        order = 1
                }
        }

        vars.nrpe_address = "$address$"
        vars.nrpe_no_ssl = true
        vars.nrpe_timeout_unknown = false

        timeout = 5m
}

object CheckCommand "check_multi" {
        import "plugin-check-command"
        command = [ "/usr/lib64/nagios/plugins/check_multi" ]
        arguments = {
                "-s" = "$host_address$"
                "-r" = "$report_level$"
                "-f" = "$config_file$"
 		"-l" = { 
			value = "$libexec_path$"
			required = false
		}
        }
        vars.host_address = "HOSTADDRESS=$address$"
        vars.report_level = "1+4+32+64"
        timeout = 60s
}

object CheckCommand "check_multi_scality" {
        import "plugin-check-command"
        command = [ "/usr/lib64/nagios/plugins/check_multi" ]
        arguments = {
                "-s" = "$host_address$"
                "-r" = "$report_level$"
                "-f" = "$config_file$"

        }
        vars.host_address = "HOSTADDRESS=$address$"
        vars.report_level = "1+4+32+64"
        timeout = 60s
}




object CheckCommand "check_vmware" {
        import "plugin-check-command"

        command = [ "/usr/lib64/nagios/plugins/check_vmware" ]

        arguments = {
                "-t" = "$timeout$"
                "-H" = "$host_address$"
                "-u" = "$metric$"
                "-p" = "$password$"
        }
        vars.host_address = "$address$"
        timeout = 240s
}

object CheckCommand "check_mysql_icinga" {
        import "plugin-check-command"
        command = [ "/usr/lib64/nagios/plugins/check_mysql" ]
        arguments = {
                "-d" = "$mysql_db$"
                "-H" = "$host_address$"
                "-u" = "$mysql_user$"
                "-p" = "$mysql_pw$"
        }
        vars.host_address = "$address$"
        vars.mysql_db = "icinga"
        vars.mysql_user = "icinga"
        vars.mysql_pw = "icinga"
        timeout = 1m
}

object CheckCommand "nrpe8k-3par_cpuperf" {
        import "plugin-check-command"
        command = [ "/usr/lib64/nagios/plugins/check_nrpe8k" ]
        arguments = {
                #"-H" = "res3parsr-ch2-01.sys.comcast.net"
                "-H" = "$sr_host$"
                "-p" = "$nrpe_port$"
                "-c" = "$nrpe_command$"
                "-n" = {
                        set_if = "$nrpe_no_ssl$"
                        description = "Do not use SSL."
                }
                "-u" = {
                        set_if = "$nrpe_timeout_unknown$"
                        description = "Make socket timeouts return an UNKNOWN state instead of CRITICAL"
                }
                "-t" = "$nrpe_timeout$"
                "-a" = "$sr_target$"
        }
        vars.nrpe_address = "$address$"
        vars.nrpe_no_ssl = true
        vars.nrpe_timeout_unknown = false
        timeout = 1m
}

object CheckCommand "check_snmp_errors" {
        import "plugin-check-command"
        command = [ "/usr/lib64/nagios/plugins/check_snmp_errors" ]
        arguments = {
                "-H" = "$snmp_address$"
                "-o" = "$snmp_oid$"
                "-C" = "$snmp_comment$"
      }
}


object CheckCommand "tcp_icinga" {
        import "plugin-check-command"
        import "ipv4-or-ipv6"

        command = [ PluginDir + "/check_tcp" ]

        arguments = {
                "-H" = {
                        value =  "$tcp_address$"
                        description = "Host name, IP Address, or unix socket (must be an absolute path)."
                }
                "-p" = {
                        value =  "$tcp_port$"
                        description = "The TCP port number."
                }
                "-e" = {
                        value = "$tcp_expect$"
                        description = "String to expect in server response (may be repeated)."
                }
                "-A" = {
                        set_if = "$tcp_all$"
                        description = "All expect strings need to occur in server response. Defaults to false."
                }
                "-E_send" = {
                        key = "-E"
                        order = 1
                        set_if = "$tcp_escape_send$"
                        description = "Enable usage of \n, \r, \t or \\ in send string."
                }
                "-s" = {
                        order = 2
                        value = "$tcp_send$"
                        description = "String to send to the server."
                }
                "-E_quit" = {
                        key = "-E"
                        order = 3
                        set_if = "$tcp_escape_quit$"
                        description = "Enable usage of \n, \r, \t or \\ in quit string."
                }
                "-q" = {
                        order = 4
                        value = "$tcp_quit$"
                        description = "String to send server to initiate a clean close of the connection."
                }
                "-r" = {
                        value = "$tcp_refuse$"
                        description = "Accept TCP refusals with states ok, warn, crit. Defaults to crit."
                }
                "-M" = {
                        value = "$tcp_mismatch$"
                        description = "Accept expected string mismatches with states ok, warn, crit. Defaults to warn."
                }
                "-j" = {
                        set_if = "$tcp_jail$"
                        description = "Hide output from TCP socket."
                }
                "-m" = {
                        value = "$tcp_maxbytes$"
                        description = "Close connection once more than this number of bytes are received."
                }
                "-d" = {
                        value = "$tcp_delay$"
                        description = "Seconds to wait between sending string and polling for response."
                }
                "-D" = {
                        value = "$tcp_certificate$"
                        description = "Minimum number of days a certificate has to be valid. 1st value is number of days for warning, 2nd is critical (if not specified: 0) - seperated by comma."
                }
                "-S" = {
                        set_if = "$tcp_ssl$"
                        description = "Use SSL for the connection."
                }
                "-w" = {
                        value = "$tcp_wtime$"
                        description = "Response time to result in warning status (seconds)."
                }
                "-c" = {
                        value = "$tcp_ctime$"
                        description = "Response time to result in critical status (seconds)."
                }
                "-t" = {
                        value = "$tcp_timeout$"
                        description = "Seconds before connection times out. Defaults to 10."
                }
        }

        vars.tcp_address = "$check_address$"
        vars.tcp_all = false
        vars.tcp_refuse = "crit"
        vars.tcp_mismatch = "warn"
       
}







object NotificationCommand "icinga-oiv-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/icinga-oiv.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICEDESC = "$service.name$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}


object NotificationCommand "icinga-oiv-host-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/icinga-oiv-host.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object CheckCommand "commercial_email_check_smtp_pop" {
	import "plugin-check-command"

	command = ["/data/nagios/etc/customers/aa/plugins/commercial_email_smtp_pop_check.pl"]
	arguments = {
		"--smtp-hostname" = "$address$"
		"--pop3-hostname" = "$pop3-hostname$"
		"--username" = "$username$"
		"--password" = "$password$"
		"--sender" = "$sender$"
		"--receiver" = "$receiver$"
		"--auth_mode" = "$auth_mode$"
		"--body" = "$body$"
	}
}

object CheckCommand "check_tcp" {
	import "plugin-check-command"
	
	command = [ PluginDir + "/check_tcp" ]
	arguments = {
		"-H" = "$address$"
		"-p" = "$port$"
	}
}

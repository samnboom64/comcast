
/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
/*apply Service "ping4" {
  import "generic-service"
  check_command = "ping4"
  assign where host.address
}

apply Service "ping6" {
  import "generic-service"
  check_command = "ping6"
  assign where host.address6
}*/

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */

# apply Service "ssh" {
#  import "generic-service"
#
#  check_command = "ssh"
#
#  assign where host.address && host.vars.os == "Linux"
#  ignore where host.name == "localhost" /* for upgrade safety */
#}



/*apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"
  check_command = "http"
  vars.http_expect = "HTTP/1.1"
  vars += config
  assign where host.vars.http_vhosts
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"
  check_command = "disk"
  vars += config
  assign where host.vars.disks
}*/

apply Service "icinga" {
  import "generic-service"
  check_command = "icinga"
  #assign where host.name == NodeName
  assign where match("respoller*", host.name)
  ignore where match("*respoller-cmcd*04c", host.name)	
	ignore where match("*respoller-ch2d*01c", host.name)

}

#apply Service "load" {
#  import "generic-service"
#  check_command = "load"
#  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
#  vars.backup_downtime = "02:00-03:00"
#  assign where host.name == NodeName
#  # assign where match("*respoller*", host.name)
#}

apply Service "procs" {
  import "generic-service"
  check_command = "procs"
  #assign where host.name == NodeName
  assign where match("restool*4c*", host.name)
}

apply Service "swap" {
  import "generic-service"
  check_command = "swap"
  #assign where host.name == NodeName
  assign where match("restool*4c*", host.name)
}

apply Service "users" {
  import "generic-service"
  check_command = "users"
  #assign where host.name == NodeName
  assign where match("restool*4c*", host.name)
}

######################################################

apply Service "ICINGA:mysql" {
  import "generic-service"
  display_name ="ICINGA:mysql"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_mysql_icinga"
  vars.nrpe_timeout = 60
  assign where match("*respoller*", host.name)
  ignore where match("*respoller*04c", host.name)
  assign where match("*restool*04c*", host.name)
}
/*
apply Service "DXGRID:multiwritequeue_status" {
  import "generic-service"
  display_name ="DXGRID:multiwritequeue_status"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_multiwritequeue"
  vars.nrpe_timeout = 60
  assign where match("*resddsa*", host.name)
}

apply Service "DXGRID:dsa_queued_ops" {
  import "generic-service"
  display_name ="DXGRID:dsa_queued_ops"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_queuedops"
  vars.nrpe_timeout = 60
  assign where match("*resddsa*", host.name)
}

apply Service "DXGRID:dsa_remotequeued_ops " {
  import "generic-service"
  display_name ="DXGRID:dsa_remotequeued_ops"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_remotequeuedops"
  vars.nrpe_timeout = 60
  assign where match("*resddsa*", host.name)
}
*/
apply Service "NRPE:os:fw" {
  import "generic-service"
  display_name ="NRPE:os:fw"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_iptables"
  vars.nrpe_timeout = 60
  assign where match("*poller*", host.name)
  assign where match("*restool*", host.name)
}

apply Service "NRPE:os:load" {
  import "generic-service"
  display_name ="NRPE:os:load"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_load"
  vars.nrpe_timeout = 60
  vars.nrpe_arguments = [ "16", "20", "24", "28", "30", "32" ]
  assign where match("*respoller*", host.name)
  assign where match("*restool*", host.name)
}

apply Service "NRPE:os:memory" {
  import "generic-service"
  display_name ="NRPE:os:memory"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_memory"
  vars.nrpe_timeout = 60
  vars.nrpe_arguments = [ "20", "10" ]
  assign where match("*poller*", host.name)
  assign where match("*restool*", host.name)
}


apply Service "NRPE:os:disk" {
  import "generic-service"
  display_name ="NRPE:os:disk"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_local_disks"
  vars.nrpe_timeout = 60
  vars.nrpe_args = "90% 95%"
  assign where match("*poller*", host.name)
  assign where match("*restool*", host.name)
}

apply Service "NRPE:os:ntp" {
  import "generic-service"
  display_name ="NRPE:os:ntp"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_ntpstat"
  vars.nrpe_timeout = 60
  assign where match("*restool*", host.name)
}

apply Service "NRPE:os:procs" {
  import "generic-service"
  display_name ="NRPE:os:procs"
  check_command = "check_multi"
  vars.config_file = "/etc/nagios/templates/multi.nrpe-standard_svcs.cmd"
  assign where match("*poller*", host.name)
}

apply Service "dell:openmanage" {
  import "generic-service"
  display_name ="dell:openmanage"
  check_command = "nrpe"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_openmanage"
  vars.nrpe_timeout = 60
  assign where host.vars.hw == "dell"
}

#apply Service "NCPA:os:load" {
#  import "generic-service"
#  display_name ="NCPA:os:load"
#  check_command = "ncpa"
#  vars.ncpa_token = "restoken"
#  vars.ncpa_metric = "agent/plugin/check_load"
#  vars.ncpa_args = "-w '16,20,24' -c '28,30,32'"
#  assign where match("*restool*", host.name)
#  assign where match("*respoller*", host.name)
#}

#apply Service "NCPA:os:ntp" {
  #import "generic-service"
  #display_name ="NCPA:os:ntp"
  #check_command = "ncpa"
  #vars.ncpa_token = "restoken"
  #vars.ncpa_metric = "agent/plugin/check_ntpstat"
  #assign where match("*poller*", host.name)
#}

### This check is load heavy ####
#apply Service "ESX:monitor" {
#  import "generic-service"
#  display_name ="esx:monitor"
#  check_command = "check_vmware"
#  check_interval = 10m
#  retry_interval = 1m
#  vars.timeout = "240"
#  vars.metric = "monitor"
#  vars.password = "c0mC@stM0n!t0r"
#  assign where match("*resesx*", host.name)
#}

#apply Service "os:if_err_out" {
#  import "generic-service"
#  display_name ="NCPA:os:if_err_out"
#  check_command = "ncpa"
#  vars.ncpa_token = "restoken"
#  vars.ncpa_metric = "interface/eth0/errout"
#  assign where match("*poller*", host.name)
#}

apply Service "ICINGA:cluster" {
    check_command = "cluster"
    check_interval = 5s
    retry_interval = 1s
    assign where match("*restool*04c*", host.name)
    ignore where match("*restool-cmcd-04c*", host.name)
    assign where match("*respoller*0[1-3]*", host.name)
    ignore where match("*respoller-cmcd-03c*", host.name)
}

# check connection to zone master
#apply Service "ICINGA:cluster-zone-master-ch2d" {
#  check_command = "cluster-zone"
#  check_interval = 5s
#  retry_interval = 1s
#  vars.cluster_zone = "ch2d"
#  assign where match("*respoller-ch2d*", host.name)
#}

#apply Service "ICINGA:cluster-zone-master-cmcd" {
#  check_command = "cluster-zone"
#  check_interval = 5s
#  retry_interval = 1s
#  vars.cluster_zone = "cmcd"
#  assign where match("*respoller-cmcd*", host.name)
#}


apply Service "NRPE:CONNECTIONS:inbound" {
  import "generic-service"
  display_name ="NRPE:CONNECTIONS:inbound"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_msg"
  vars.nrpe_timeout = 60
  vars.nrpe_arguments = [ ".1.3.6.1.4.1.25194.1.2.6.3.1.1.3" , "inbound_connections" ,"10" , "0" ]
  assign where match("*resimta*", host.name)
  assign where match("*resomta*", host.name)
}

apply Service "NRPE:MESSAGES:QUEUE_workflow_imta" {
  import "generic-service"
  display_name ="NRPE:MESSAGES:QUEUE_workflow_imta"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_avt"
  vars.nrpe_timeout = 60
  vars.nrpe_arguments = [ ".1.3.6.1.4.1.25194.1.2.3.4.4.4" , "msg_workflow_queue" , "10000" , "20000" ]
  assign where match("*resimta*", host.name)
}

apply Service "NRPE:MESSAGES:QUEUE_workflow_omta" {
  import "generic-service"
  display_name ="NRPE:MESSAGES:QUEUE_workflow_omta"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_avt"
  vars.nrpe_timeout = 60
  vars.nrpe_arguments = [ ".1.3.6.1.4.1.25194.1.2.3.4.4.4" , "msg_workflow_queue" , "5000" , "10000" ]
  assign where match("*resomta*", host.name)
}

apply Service "NRPE:ZIMBRA8:PORT_http_thread_saturation" {
  import "generic-service"
  display_name ="NRPE:ZIMBRA8:PORT_http_thread_saturation"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "zimbra_http_threadsatcnt"
  vars.nrpe_timeout = 60
  #vars.nrpe_arguments = [ " " , " " ]
  assign where match("*resmail*", host.name)
}

apply Service "NRPE:ZIMBRA8:PORT_imap_thread_saturation" {
  import "generic-service"
  display_name ="NRPE:ZIMBRA8:PORT_imap_thread_saturation"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "zimbra_imap_threadsatcnt"
  vars.nrpe_timeout = 60
  #vars.nrpe_arguments = [ " " , " " ]
  assign where match("*resmail*", host.name)
}

apply Service "NRPE:SPROXY:connections" {
  import "generic-service"
  display_name ="NRPE:SPROXY:connections"
  check_command = "nrpe8k"
  vars.nrpe_no_ssl = true
  vars.nrpe_command = "check_connections_sprxyd"
  vars.nrpe_timeout = 60
  #vars.nrpe_arguments = [ " " , " " ]
  assign where match("*resiscd*", host.name)
  assign where match("*resscd*", host.name)
}

apply Service "SNMP:uptime" {
  import "generic-service"
  display_name ="SNMP:uptime"
  check_command = "snmp"
  vars.snmp_oid = "1.3.6.1.2.1.1.3.0"
  assign where match("*respoller*", host.name)
}


#apply Service "NRPE:3PAR:CH2_PERFOMANCE_cpu" {
#  import "generic-service"
#  display_name ="NRPE:3PAR:CH2_PERFOMANCE_cpu"
#  check_command = "nrpe8k-3par_cpuperf"
#  vars.nrpe_no_ssl = true
#  vars.nrpe_command = "3par_cpuperf"
#  vars.nrpe_timeout = 120
#  vars.sr_host = "res3parsr-ch2-01.sys.comcast.net"
#  vars.sr_target = "$host.name$"
#  #vars.nrpe_arguments = [ " " ]
#  assign where match("*3par-ch2*", host.name)
#}

#apply Service "NRPE:3PAR:PO_PERFOMANCE_cpu" {
#  import "generic-service"
#  display_name ="NRPE:3PAR:PO_PERFOMANCE_cpu"
#  check_command = "nrpe8k-3par_cpuperf"
#  vars.nrpe_no_ssl = true
#  vars.nrpe_command = "3par_cpuperf"
#  vars.nrpe_timeout = 120
#  vars.sr_host = "res3parsr-po-01.sys.comcast.net"
#  vars.sr_target = "$host.name$"
#  #vars.nrpe_arguments = [ " " ]
#  assign where match("*3par-po*", host.name)
#}

#apply Service "NET-SNMP-CPU" {
#  import "generic-service"
#  display_name ="NET-SNMP-CPU"
#  check_command = "check_net_snmp_cpu"
#  assign where match("*resmail*", host.name)
#}

#apply Service "NET-SNMP-LA" {
#  import "generic-service"
#  display_name ="NET-SNMP-LA"
#  check_command = "check_net_snmp_la"
#  assign where match("*resmail*", host.name)
#}

#apply Service "NET-SNMP-PROCS" {
#  import "generic-service"
#  display_name ="NET-SNMP-PROCS"
#  check_command = "check_net_snmp_procs"
#  assign where match("*resmail*", host.name)
#}

#apply Service "NET-SNMP-DISK" {
#  import "generic-service"
#  display_name ="NET-SNMP-DISK"
#  check_command = "check_net_snmp_disk"
#  assign where match("*resmail*", host.name)
#}


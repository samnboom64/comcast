First Step:
===================================================================
[root@icinga2 ~]# cd /etc/icinga2/scripts/
[root@icinga2 scripts]# ll
total 16
-rwxr-xr-x 1 icinga icinga 734 Aug  2 16:17 icinga-oiv-host.sh
-rwxr-xr-x 1 icinga icinga 774 Aug  2 13:45 icinga-oiv.sh
-rwxr-xr-x 1 icinga icinga 384 Apr 20 18:30 mail-host-notification.sh
-rwxr-xr-x 1 icinga icinga 437 Apr 20 18:30 mail-service-notification.sh
[root@icinga2 scripts]# cat icinga-oiv-host.sh 
#!/bin/sh


/usr/bin/curl -s -k -X POST -H "Content-type: application/json" -d '{ "access_token":"856fe6e00dafb99d171d54120cb82b2b", "format":"json", "alarm":{"name":"'$HOSTDISPLAYNAME'","originating_system":"eventswitcher","impact_level":"low","alarm_type":"application","sop":"https://www.teamccp.com/confluence/display/xcal/SOP-for-reconnects"},"events": [{"subject":"'$HOSTDISPLAYNAME'", "application_name":"'$NOTIFICATIONTYPE'", "service_desk":"TEST","description":"Please follow this SOP to check the status of the alarm: http","host_impacted":"'$HOSTALIAS'", "event_status":"'$HOSTSTATE'","host_ip_address":"'$HOSTADDRESS'","initiated_at":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}]}' 'http://cpg-oiv-api.sys.comcast.net/v1/alarms'

[root@icinga2 scripts]# cat icinga-oiv.sh 
#!/bin/sh


/usr/bin/curl -s -k -X POST -H "Content-type: application/json" -d '{ "access_token":"856fe6e00dafb99d171d54120cb82b2b", "format":"json", "alarm":{"name":"'$SERVICEDESC'","originating_system":"eventswitcher","impact_level":"low","alarm_type":"application","sop":"https://www.teamccp.com/confluence/display/xcal/SOP-for-reconnects"},"events": [{"subject":"'$SERVICEDESC'", "application_name":"'$SERVICEDISPLAYNAME'", "service_desk":"TEST","host_ip_address":"'$HOSTADDRESS'","description":"Please follow this SOP to check the status of the alarm: http","host_impacted":"'$HOSTALIAS'","service_impacted":"'$SERVICEDISPLAYNAME'", "event_status":"'$SERVICESTATE'","initiated_at":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}]}' 'http://cpg-oiv-api.sys.comcast.net/v1/alarms'



[root@icinga2 scripts]# 





Second Step:
==============================================================================
[root@icinga2 scripts]# cd ../zones.d/
[root@icinga2 zones.d]# ll
total 12
drwxr-xr-x 2 root root 4096 Aug  1 21:46 check-satellite
drwxr-xr-x 2 root root 4096 Aug  2 12:21 global-templates
drwxr-xr-x 2 root root 4096 Aug  2 13:21 HA-Cluster
[root@icinga2 zones.d]# cd global-templates/
[root@icinga2 global-templates]# ll
total 52
-rw-r----- 1 icinga icinga 2566 Aug  2 12:14 commands.conf
-rw-r----- 1 icinga icinga  542 Apr 20 18:30 downtimes.conf
-rw-r----- 1 icinga icinga  638 Apr 20 18:30 groups.conf
-rw-r----- 1 icinga icinga 2049 Jun 14 03:46 hosts.conf-bak
-rw-r----- 1 icinga icinga  966 Aug  2 12:21 notifications.conf
-rw-r----- 1 icinga icinga  801 Apr 20 18:30 satellite.conf
-rw-r----- 1 icinga icinga 2558 Jun 14 16:44 services.conf
-rw-r----- 1 icinga icinga 2525 Jun 14 06:40 services.conf-bak
-rw-r----- 1 icinga icinga 1248 Jun 14 14:36 services-remote.conf
-rw-r----- 1 icinga icinga 1620 Jun 14 04:15 services-remote.conf-bak
-rw-r----- 1 icinga icinga 2264 Aug  2 12:15 templates.conf
-rw-r----- 1 icinga icinga  906 Apr 20 18:30 timeperiods.conf
-rw-r----- 1 icinga icinga  310 Apr 20 18:30 users.conf
[root@icinga2 global-templates]# cat commands.conf 
/* Command objects */

object NotificationCommand "mail-host-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-host-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}


object NotificationCommand "icinga-oiv-host-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/icinga-oiv-host.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-service-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICEDESC = "$service.name$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}




object NotificationCommand "icinga-oiv-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/icinga-oiv.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICEDESC = "$service.name$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}




[root@icinga2 global-templates]# 


Third Step:
================================================================================================
[root@icinga2 global-templates]# cat tempates_oiv.conf
/*
 * Generic template examples.
 */


/**
 * Provides default settings for hosts. By convention
 * all hosts should import this template.
 *
 * The CheckCommand object `hostalive` is provided by
 * the plugin check command templates.
 * Check the documentation for details.
 */
template Host "generic-host" {
  max_check_attempts = 3
  check_interval = 1m
  retry_interval = 30s

  check_command = "hostalive"
}

/**
 * Provides default settings for services. By convention
 * all services should import this template.
 */
template Service "generic-service" {
  max_check_attempts = 5
  check_interval = 1m
  retry_interval = 30s
}

/**
 * Provides default settings for users. By convention
 * all users should inherit from this template.
 */

template User "generic-user" {

}

/**
 * Provides default settings for host notifications.
 * By convention all host notifications should import
 * this template.
 */
template Notification "mail-host-notification" {
  command = "mail-host-notification"

  states = [ Up, Down ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

/**
 * Provides default settings for service notifications.
 * By convention all service notifications should import
 * this template.
 */
template Notification "mail-service-notification" {
  command = "mail-service-notification"

  states = [ OK, Warning, Critical, Unknown ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

template Notification "icinga-oiv-notification" {
  command = "icinga-oiv-notification"

  states = [ OK, Warning, Critical, Unknown ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

template Notification "icinga-oiv-host-notification" {
  command = "icinga-oiv-host-notification"


	states = [ Up, Down ]
  	types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}
[root@icinga2 global-templates]# 




Fourth Step:
================================================================================================
[root@icinga2 global-templates]# cat notifications_oiv.conf
/**
 * The example notification apply rules.
 *
 * Only applied if host/service objects have
 * the custom attribute `notification` defined
 * and containing `mail` as key.
 *
 * Check `hosts.conf` for an example.
 */

apply Notification "mail-icingaadmin" to Host {
  import "mail-host-notification"

  user_groups = host.vars.notification.mail.groups

  assign where host.vars.notification.mail
}

apply Notification "mail-icingaadmin" to Service {
  import "mail-service-notification"

  user_groups = host.vars.notification.mail.groups

  assign where host.vars.notification.mail
}





[root@icinga2 global-templates]# 



Fifth Step:
================================================================================================
[root@icinga2 global-templates]# cd ../HA-Cluster/
[root@icinga2 HA-Cluster]# ll
total 8
-rw-r----- 1 icinga icinga 1569 Aug  2 00:13 hosts.conf-bak
-rw-r----- 1 icinga icinga 2625 Aug  2 13:21 hosts_remote.conf
[root@icinga2 HA-Cluster]# cat hosts_remote.conf 

object Host "webkit.samn.com" {
  import "generic-host"

  address = "192.168.179.136"
  address6 = "::1"

  vars.os = "Linux"

  vars.remote_client = "webkit.samn.com"

  /* host specific check arguments */
  vars.users_wgreater = 10
  vars.users_cgreater = 20

vars.notification["oiv"] = {
    groups = [ "icingaadmins" ]
  }
}

object Host "icinga2-s2.samn.com" {
  import "generic-host"

  address = "192.168.179.142"
  address6 = "::1"

  vars.os = "Linux"

  vars.remote_client = "icinga2-s2.samn.com"

  /* host specific check arguments */
  vars.users_wgreater = 10
  vars.users_cgreater = 20

vars.notification["oiv"] = {
    groups = [ "icingaadmins" ]
  }

}

object Host "icinga2" {

  import "generic-host"


  address = "192.168.179.140"
  address6 = "::1"

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"

  /* Define http vhost attributes for service apply rules in `services.conf`. */
  vars.http_vhosts["http"] = {
    http_uri = "/"
  }
  /* Uncomment if you've sucessfully installed Icinga Web 2. */
  //vars.http_vhosts["Icinga Web 2"] = {
  //  http_uri = "/icingaweb2"
  //}

  /* Define disks and attributes for service apply rules in `services.conf`. */
  vars.disks["disk"] = {
    /* No parameters. */
  }
  vars.disks["disk /"] = {
    disk_partitions = "/"
  }

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
#  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
 #   groups = [ "icingaadmins" ]
 # }
vars.notification["oiv"] = {
    groups = [ "icingaadmins" ]
  }


}


object Host "icinga2-s1" {

  import "generic-host"


  address = "192.168.179.141"
  address6 = "::1"

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"

  /* Define http vhost attributes for service apply rules in `services.conf`. */
  vars.http_vhosts["http"] = {
    http_uri = "/"
  }
  /* Uncomment if you've sucessfully installed Icinga Web 2. */
  //vars.http_vhosts["Icinga Web 2"] = {
  //  http_uri = "/icingaweb2"
  //}

  /* Define disks and attributes for service apply rules in `services.conf`. */
  vars.disks["disk"] = {
    /* No parameters. */
  }
  vars.disks["disk /"] = {
    disk_partitions = "/"
  }

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
#  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
 #   groups = [ "icingaadmins" ]
 # }
vars.notification["oiv"] = {
    groups = [ "icingaadmins" ]
  }


}
[root@icinga2 HA-Cluster]# 


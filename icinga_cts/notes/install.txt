class icinga2{


$service_restart =[ 'icinga2', 'ido2db', 'httpd' ]

          $ido_db_user = "icinga"
          $ido_db_pass = "icinga"
          $ido_db_name = "icinga"
          $ido_db_schema = "/usr/share/icinga2-ido-mysql/schema/mysql.sql"



yumrepo { 'icinga-stable-release':
      baseurl        => "http://copasp-po-b01p.sys.comcast.net:38253/resemail/x86_64/6/icinga2/",
      enabled        => 1,
      gpgcheck       => 0,
      descr          => "ICINGA (stable release for epel)",
      alias => 'icinga2-repo-file',
    }



$rpm_pre =[ 'httpd', 'gcc', 'glibc', 'glibc-common', 'gd', 'gd-devel', 'openssl-devel', 'mysql-server', 'libdbi',                                                    'libdbi-dbd-mysql', 'libdbi-devel', 'libdbi-drivers', 'libpng', 'libpng-devel',
                'perl-Config-IniFiles', 'nagios-plugins-perl', 'php', 'php-cli', 'php-pear',
                'php-xmlrpc', 'php-pdo', 'php-soap', 'php-gd', 'php-ldap', 'php-mysql',
                'icinga2', 'icinga2-bin', 'icinga2-common', 'icinga2-doc', 'icinga2-debuginfo', 'icinga-web', 'icinga-web-mysql',
                'icinga2-ido-mysql', 'icinga-idoutils-libdbi-mysql','mysql' ]

package { $rpm_pre:
    ensure => latest,
    require => Yumrepo['icinga2-repo-file'],
  }->

service { mysqld:
        enable => true,
    ensure => running,
    hasrestart => true,
}->




###Mysql DB create and Populate

####Create a database/user icinga and give access
exec { 'create-mysql-icinga2-ido-db':
    path => '/bin:/usr/bin:/sbin:/usr/sbin',
    unless => "mysql -u$ido_db_user -p$ido_db_pass $ido_db_name",
    command => "mysql -uroot -e \"CREATE DATABASE $ido_db_name ; GRANT ALL ON $ido_db_name.* TO $ido_db_user@localhost IDENTIFIED BY \'$ido_db_pass\';\"",
        alias => 'create-mysql-icinga2-ido-db',
#       require => Service['mysqld'],

}->



##populate the mysql schema from mysql data dump

  exec { 'populate-icinga2-ido-mysql-db':
    path => '/bin:/usr/bin:/sbin:/usr/sbin',
    unless => "mysql -u$ido_db_user -p$ido_db_pass $ido_db_name -e \"SELECT * FROM icinga_dbversion;\" &> /dev/null",
    command => "mysql -u$ido_db_user -p$ido_db_pass $ido_db_name < $ido_db_schema",
  }->

icinga2::feature { 'ido-mysql':
        notify => Service[icinga2]
  }->


 icinga2::feature { 'api':
  }->

icinga2::dir { '/etc/icinga2/pki': }->
icinga2::files { "/etc/icinga2/pki/ca.crt": }->
icinga2::files { "/etc/icinga2/pki/$fqdn.crt": }->
icinga2::files { "/etc/icinga2/pki/$fqdn.csr": }->

file { "/etc/icinga2/pki/$fqdn.key":
        ensure => "file",
        owner => icinga,
        group => icinga,
        mode  => 600,
        source => "puppet:///modules/icinga2/etc/icinga2/pki/$fqdn.key",

  }->




service { $service_restart:
        enable => true,
    ensure => running,
    hasrestart => true,
}





#Define to enable icinga2 features (eg:api)

define icinga2::feature ($feature = $title) {
  exec { "icinga2-feature-${feature}":
    path => '/bin:/usr/bin:/sbin:/usr/sbin',
    unless => "readlink /etc/icinga2/features-enabled/${feature}.conf",
    command => "icinga2 feature enable ${feature}",
  }
}

define icinga2::dir ($feature = $title) {
  file { "$feature":
        ensure => "directory",
        owner => icinga,
        group => icinga,
        mode  => 644
  }
}
define icinga2::files ($feature = $title) {
  file { "$feature":
        ensure => "file",
        owner => icinga,
        group => icinga,
        mode  => 644,
        source => "puppet:///modules/icinga2$feature",

  }

}




}
